#!/usr/bin/env perl
use strict;
use warnings;
(our $Prog) = ($0 =~ m%([^/]+)$%);
use Getopt::Long;
use Pod::Usage;
use File::Basename qw(basename);
use File::Slurp;
use IO::Dir;
use IO::Socket::SSL;
use LWP::UserAgent qw();
eval 'use Mozilla::CA';
use Time::HiRes qw(ualarm usleep);
use Net::Amazon::EC2 0.11;
use POSIX ':signal_h';
use DateTime::Locale;
use DateTime::TimeZone;

#---- OPTIONS ----

my $Help                       = 0;
my $Debug                      = 0;
my $Quiet                      = 0;
my $Noaction                   = 0;

my $aws_access_key_id          = $ENV{AWS_ACCESS_KEY_ID};
my $aws_secret_access_key      = $ENV{AWS_SECRET_ACCESS_KEY};
my $aws_access_key_id_file     = $ENV{AWS_ACCESS_KEY_ID};
my $aws_secret_access_key_file = $ENV{AWS_SECRET_ACCESS_KEY};
my $aws_credentials_file       = $ENV{AWS_CREDENTIALS};
my $use_iam_role               = 0;
my $region                     = undef;
my $ec2_endpoint               = undef;
my @descriptions               = ();
my @tags                       = ();
my $tag_separator              = ";";
my @freeze_filesystem          = ();
my @no_freeze_filesystem       = ();
my $mongo                      = 0;
my $mongo_username             = undef;
my $mongo_password             = undef;
my $mongo_host                 = undef;
my $mongo_port                 = 27017;
my $mongo_stop                 = 0;
my $mysql                      = 0;
#my $mysql_defaults_file        = "$ENV{HOME}/.my.cnf";
my $mysql_defaults_file        = undef;
my $mysql_socket               = undef;
my $mysql_master_status_file   = undef;
my $mysql_username             = undef;
my $mysql_password             = undef;
my $mysql_host                 = undef;
my $mysql_stop                 = 0;
my $snapshot_timeout           = 10.0; # seconds
my $lock_timeout               =  0.5; # seconds
my $lock_tries                 = 60;
my $lock_sleep                 =  5.0; # seconds
my $pre_freeze_command         = undef;
my $post_thaw_command          = undef;
my $mongo_init_script                = '/etc/init.d/mongod';

Getopt::Long::config('no_ignore_case');
GetOptions(
  'help|h|?'                     => \$Help,
  'debug|d'                      => \$Debug,
  'quiet|q'                      => \$Quiet,
  'noaction|n'                   => \$Noaction,

  'aws-access-key-id=s'          => \$aws_access_key_id,
  'aws-secret-access-key=s'      => \$aws_secret_access_key,
  'aws-access-key-id-file=s'     => \$aws_access_key_id_file,
  'aws-secret-access-key-file=s' => \$aws_secret_access_key_file,
  'aws-credentials-file=s'       => \$aws_credentials_file,
  'use-iam-role'                 => \$use_iam_role,
  'region=s'                     => \$region,
  'ec2-endpoint=s'               => \$ec2_endpoint,
  'description=s'                => \@descriptions,
  'tag=s'                        => \@tags,
  'xfs-filesystem=s'             => \@freeze_filesystem,
  'freeze-filesystem=s'          => \@freeze_filesystem,
  'no-freeze-filesystem=s'       => \@no_freeze_filesystem,
  'mongo'                        => \$mongo,
  'mongo-username=s'             => \$mongo_username,
  'mongo-password=s'             => \$mongo_password,
  'mongo-host=s'                 => \$mongo_host,
  'mongo-port=s'                 => \$mongo_port,
  'mongo-stop'                   => \$mongo_stop,
  'mysql'                        => \$mysql,
  'mysql-defaults-file=s'        => \$mysql_defaults_file,
  'mysql-socket=s'               => \$mysql_socket,
  'mysql-master-status-file=s'   => \$mysql_master_status_file,
  'mysql-username=s'             => \$mysql_username,
  'mysql-password=s'             => \$mysql_password,
  'mysql-host=s'                 => \$mysql_host,
  'mysql-stop'                   => \$mysql_stop,
  'snapshot-timeout=s'           => \$snapshot_timeout,
  'lock-timeout=s'               => \$lock_timeout,
  'lock-tries=s'                 => \$lock_tries,
  'lock-sleep=s'                 => \$lock_sleep,
  'pre-freeze-command=s'         => \$pre_freeze_command,
  'post-thaw-command=s'          => \$post_thaw_command,
  'mongo-init=s'                       => \$mongo_init_script,
) or pod2usage(2);

my $filesystem_frozen = 0;

pod2usage(1) if $Help;

my @volume_ids = @ARGV;

$ec2_endpoint ||= "https://ec2.$region.amazonaws.com" if $region;

my $freeze_cmd = "fsfreeze";
$freeze_cmd    = "xfs_freeze"
    if $freeze_cmd and system("which $freeze_cmd >/dev/null") != 0;

#---- MAIN ----

($aws_access_key_id,      $aws_secret_access_key) = determine_access_keys(
 $aws_access_key_id,      $aws_secret_access_key,
 $aws_access_key_id_file, $aws_secret_access_key_file,
 $aws_credentials_file,
);
die "$Prog: ERROR: Can't find AWS access key or secret access key"
  unless $use_iam_role or ($aws_access_key_id and $aws_secret_access_key);
$Debug and warn "$Prog: Using AWS access key: $aws_access_key_id\n";

if ( scalar (@volume_ids) == 0 ) {
  @volume_ids = discover_volume_ids($ec2_endpoint);
}
pod2usage(2) unless scalar @volume_ids;

die "$Prog: ERROR: Descriptions count (", scalar (@descriptions),
    ") does not match volumes count (", scalar (@volume_ids), ")"
  if (scalar (@descriptions) > 1 &&
      scalar (@descriptions) != scalar (@volume_ids) );

if ( scalar (@descriptions) == 0 ) {
  $Debug and warn "$Prog: Using default snapshot description\n";
  $descriptions[0] = $Prog;
}

if ( scalar (@descriptions) == 1 ) {
  $Debug and warn "$Prog: Using description '$descriptions[0]'"
                . " for all snapshot descriptions\n";
  for ( my $index = 1; $index < scalar (@volume_ids); ++$index ) {
    $descriptions[$index] = $descriptions[0];
  }
}

die "$Prog: ERROR: Tags count (", scalar (@tags),
    ") does not match volumes count (", scalar (@volume_ids), ")"
  if (scalar (@tags) > 1 &&
      scalar (@tags) != scalar (@volume_ids) );

if ( scalar (@tags) == 1 ) {
  $Debug and warn "$Prog: Using tag '$tags[0]'"
                . " for all snapshot tags\n";
  for ( my $index = 1; $index < scalar (@volume_ids); ++$index ) {
    $tags[$index] = $tags[0];
  }
}

#
# Mongo
#
my $mongo_stopped = undef;
my $mongo_dbh = undef;
if ( $mongo_stop ) {
  $mongo_stopped = mongo_stop();
} elsif ( $mongo ) {
  $mongo_dbh = mongo_connect($mongo_host, $mongo_port, $mongo_username, $mongo_password);
  mongo_lock($mongo_dbh);
}

#
# MySQL
#
my $mysql_stopped = undef;
my $mysql_dbh = undef;
my $mysql_kill_query = 0;
if ( $mysql_stop ) {
  $mysql_stopped = mysql_stop();
} elsif ( $mysql ) {
  $mysql_dbh = mysql_connect($mysql_host, $mysql_socket, $mysql_username, $mysql_password);
  sub interrupt { $mysql_kill_query = 1; die("interrupted") };
  $SIG{INT}    = \&interrupt;
  $SIG{TERM}   = \&interrupt;
  $SIG{HUP}    = \&interrupt;
  mysql_lock($mysql_dbh);
}

if ( $pre_freeze_command ) {
  run_command([$pre_freeze_command]);
}

# sync may help flush changed blocks, increasing the consistency on
# un-freezable filesystems, and reducing the time the freeze locks changes
# out on freezable filesystems.
run_command(['sync']);

if ( scalar @freeze_filesystem > 0 ) {
  fs_freeze($freeze_cmd, \@freeze_filesystem);
  $filesystem_frozen = 1;
}

my $success =
  ebs_snapshot(\@volume_ids, $ec2_endpoint, \@descriptions, \@tags);

exit ($success ? 0 : -1);

END {
  my $exit_status = $?;

  fs_thaw(\@freeze_filesystem) if $filesystem_frozen;

  if ( $post_thaw_command ) {
    run_command([$post_thaw_command]);
  }

  if ( defined($mysql_master_status_file) ) {
    $Debug and warn "$Prog: ", scalar localtime,
      ": removing master info file: $mysql_master_status_file\n";
    if ( not $Noaction ) {
      unlink $mysql_master_status_file
        or die "$Prog: Couldn't remove file: $mysql_master_status_file: $!\n";
    }
  }

  if ( $mongo_stopped ) {
    mongo_start();
  } elsif ( $mongo_dbh ) {
    mongo_unlock($mongo_dbh);
    # We don't need to disconnect with the MongoDB module
  }

  if ( $mysql_stopped ) {
    mysql_start();
  } elsif ( $mysql_dbh ) {
    if ( $mysql_kill_query ) {
       sql_kill_current_query();
    }
    mysql_unlock($mysql_dbh);
    $Debug and warn "$Prog: ", scalar localtime, ": MySQL disconnect\n";
    $mysql_dbh->disconnect;
  }

  $Debug and warn "$Prog: ", scalar localtime, ": done\n";

  exit ($exit_status || $?);
}

#---- METHODS ----

sub ec2_connection {
  my ($ec2_endpoint) = @_;

  $Debug and warn "$Prog: ", scalar localtime, ": create EC2 object\n";
  $Debug and warn "$Prog: Endpoint: $ec2_endpoint\n" if $ec2_endpoint;

  # EC2 API object
  return Net::Amazon::EC2->new(
    ((! $use_iam_role) ? (AWSAccessKeyId  => $aws_access_key_id,) : () ),
    ((! $use_iam_role) ? (SecretAccessKey => $aws_secret_access_key) : () ),
    ($ec2_endpoint ? (base_url => $ec2_endpoint) : ()),
    # ($Debug ? (debug => 1) : ()),
  );
}

sub ebs_snapshot {
  my ($volume_ids, $ec2_endpoint, $descriptions, $tags) = @_;

  # EC2 API object
  my $ec2 = ec2_connection($ec2_endpoint);

  if ( not $ec2 ) {
    warn "$Prog: ERROR: Unable to create EC2 connection";
    return undef;
  }

 VOLUME:
  for (my $index = 0; $index < scalar(@$volume_ids); ++$index ) {
    my $volume_id = $$volume_ids[$index];
    my $description = $$descriptions[$index];

    $Debug and warn "$Prog: volume_id: $volume_id; description: $description\n";

    # Snapshot
    $Debug and
      warn "$Prog: ", scalar localtime, ": ec2-create-snapshot $volume_id\n";
    if ( $Noaction ) {
      warn "snapshot SKIPPED (--noaction)\n";
      next VOLUME;
    }

    my $snapshot;
    eval {
      local $SIG{ALRM} = sub { ualarm(0); die "timeout\n" };
      ualarm($snapshot_timeout * 1_000_000);
      $snapshot = $ec2->create_snapshot(
        VolumeId    => $volume_id,
        Description => $description,
      );
      ualarm(0);
    };
    ualarm(0);
    if ( $@  ){
      warn "$Prog: ERROR: create_snapshot: ", ec2_error_message($@);
      return undef;
    }

    my $snapshot_id;
    if ( not defined $snapshot ) {
      warn "$Prog: ERROR: create_snapshot returned undef\n";
      return undef;
    } elsif ( not ref $snapshot ) {
      warn "$Prog: ERROR: create_snapshot returned '$snapshot'\n";
      return undef;
    } elsif ( $snapshot->can('snapshot_id') ) {
      $snapshot_id = $snapshot->snapshot_id;
      if (scalar (@tags) > 0){
        my $tag = $$tags[$index];
        my @sep_tags = split($tag_separator, $tag);
        if(scalar (@sep_tags) > 0){
          my %snapshot_tag;
          for ( my $tag_index = 0; $tag_index < scalar (@sep_tags); ++$tag_index ) {
            my ($tag_key, $tag_value) = split('=', $sep_tags[$tag_index], 2);
            $snapshot_tag{$tag_key} = $tag_value;
          }
          $ec2->create_tags(
            ResourceId    => $snapshot_id,
            Tags          => \%snapshot_tag,
          );
        }
      }
      $Quiet or print "$snapshot_id\n";
    } else {
      for my $error ( @{$snapshot->errors} ) {
        warn "$Prog: ERROR: ".$error->message."\n";
      }
      return undef;
    }
  }
  return 1;
}

sub get {
  my ($url) = @_;

  my $ua = LWP::UserAgent->new;
  $ua->timeout(2);

  my $response = $ua->get($url);

  my $content;
  if ($response->is_success) {
    $content = $response->decoded_content;
  } else {
    $Debug and warn "$Prog: ", scalar localtime,
                    ": Unable to fetch $url: @{[$response->status_line]}\n";
  }

  return $content;
}

sub ec2_instance_description {
  my ($ec2_endpoint) = @_;

  $Debug and warn "$Prog: ", scalar localtime,
                  ": Determining instance id\n";

  my $instance_id = get('http://169.254.169.254/latest/meta-data/instance-id');
  unless ( defined $instance_id ) {
    warn "$Prog: ERROR: Unable to determine instance id\n";
    return undef;
  }

  my $ec2 = ec2_connection($ec2_endpoint);

  $Debug and warn "$Prog: ", scalar localtime,
                  ": Fetching instance description for $instance_id\n";
  my $reservations = $ec2->describe_instances(InstanceId => $instance_id);
  unless ( defined($reservations) && scalar(@$reservations) == 1 ) {
    warn "$Prog: ERROR: Unable to find reservation for $instance_id\n";
    return undef;
  }

  return $reservations->[0]->instances_set->[0];
}

sub discover_volume_ids {
  my ($ec2_endpoint) = @_;

  $Debug and warn "$Prog: ", scalar localtime,
                  ": No volume ids specified; discovering volume ids\n";

  my @filesystems = (@freeze_filesystem, @no_freeze_filesystem);

  if ( scalar(@filesystems) == 0 ) {
    $Debug and warn "$Prog: ", scalar localtime,
                    ": No filesystems specified; unable to discover volume ids\n";
    return ();
  }

  $Debug and warn "$Prog: ", scalar localtime,
                  ": Discovering volume ids for: @filesystems\n";

  my $ec2_instance = ec2_instance_description($ec2_endpoint);
  return () unless $ec2_instance;

  # RunningInstances->block_device_mapping is a Maybe[ArrayRef]
  unless ( $ec2_instance->block_device_mapping ) {
    warn "$Prog: ERROR: Unable to find block device mappings for ", $ec2_instance->instance_id, "\n";
    return ();
  }

  my %ebs_volume_ids = ();
  for my $bd ( @{$ec2_instance->block_device_mapping} ) {
    # BlockDeviceMapping->ebs is a Maybe[ArrayRef]
    $ebs_volume_ids{$bd->device_name} = $bd->ebs->volume_id if $bd->ebs;
  }

  unless ( %ebs_volume_ids ) {
    warn "$Prog: ERROR: Unable to find EBS block devices for ", $ec2_instance->instance_id, "\n";
    return ();
  }

  if ( $Debug ) {
    warn "$Prog: ", scalar localtime,
         ": Found EBS block devices for ", $ec2_instance->instance_id, ": \n";
    for my $dev (sort keys %ebs_volume_ids) {
      warn "$Prog: ", scalar localtime, ":     ", $ebs_volume_ids{$dev}, " ", $dev, "\n";
    }
  }

  my $volume_ids;
  for my $fs (@filesystems) {
    my $device = qx(mountpoint -dq "$fs");
    chomp $device;
    unless ($? == 0 && $device) {
      warn "$Prog: ERROR: $fs is not a mount point\n";
      return ();
    }

    # Check sysfs for a /slaves directory; if we find one, assume we have a
    # compound device (e.g. LVM or Raid), otherwise, get the basename of the
    # symlink at /sys/dev/block/MAJOR:MINOR
    my $slaves = IO::Dir->new("/sys/dev/block/$device/slaves");
    my @devices = ();
    push @devices, grep { !/^\./ } $slaves->read() if defined($slaves);
    push @devices, basename readlink("/sys/dev/block/$device") unless scalar(@devices);

    if ( scalar(@devices) == 0 ) {
      warn "$Prog: ERROR: Unable to determine devices for mount $fs\n";
      return ();
    }

    for my $device (@devices) {
      my $ec2_device = "/dev/$device";
      $ec2_device =~ s/\bxvd/sd/;

      my $volume_id = $ebs_volume_ids{$ec2_device};

      unless ( defined $volume_id ) {
        warn "$Prog: ERROR: Unable to determine volume id for device $device in mount $fs\n";
        return ();
      }

      push @$volume_ids, $volume_id;
    }
  }

  return @$volume_ids;
}

#
# Mongo
#
sub mongo_connect {
  my ($mongo_host, $mongo_port, $mongo_username, $mongo_password) = @_;

  require MongoDB;
  MongoDB->import;
  require MongoDB::Database;
  MongoDB::Database->import;
  require MongoDB::Admin;
  MongoDB::Admin->import;

  $mongo_host ||= 'localhost';

  $Debug and warn "$Prog: ", scalar localtime,
                  ": mongo connect on ${mongo_host}:${mongo_port}\n";

  my $mongo_conn = MongoDB::Connection->new(host => "${mongo_host}:${mongo_port}")
    or die "$Prog: ERROR: Unable to connect to mongo"
         . " on $mongo_host";

  if (defined $mongo_username && defined $mongo_password) {
    $mongo_conn->authenticate('admin', $mongo_username, $mongo_password)
      or die "$Prog: ERROR: Unable to connect to mongo"
           . " on $mongo_host as $mongo_username";
  }

  my $mongo_dbh = MongoDB::Admin->new(connection => $mongo_conn)
    or die "$Prog: ERROR: Unable to get Mongo admin connection"
           . " on $mongo_host";

  return $mongo_dbh;
}

sub mongo_lock {
  my ($mongo_dbh) = @_;

  # Don't worry about retry since Mongo has reconnect option on by default
  $Debug and warn "$Prog: ", scalar localtime, ": locking mongo\n";

  if ( $Noaction ) {
    warn "mongo lock SKIPPED (--noaction)\n";
  }
  $mongo_dbh->fsync_lock();

  $Debug and warn "$Prog: ", scalar localtime, ": mongo locked\n";

  return 1;
}

sub mongo_unlock {
  my ($mongo_dbh) = @_;

  # Don't worry about retry since Mongo has reconnect option on by default
  $Debug and warn "$Prog: ", scalar localtime, ": unlocking mongo\n";

  if ( $Noaction ) {
    warn "mongo unlock SKIPPED (--noaction)\n";
  }
  $mongo_dbh->unlock();

  $Debug and warn "$Prog: ", scalar localtime, ": mongo unlocked\n";

}

sub mongo_stop {
  $Debug and warn "$Prog: ", scalar localtime, ": mongo stop\n";

  my $result = system($mongo_init_script, 'stop');

  if ( $result != 0 ) {
    die "$Prog: Unable to stop mongod: $? $!";
  }

  return 1;
}

sub mongo_start {
  $Debug and warn "$Prog: ", scalar localtime, ": mongo start\n";

  my $result = system($mongo_init_script, 'start');

  if ( $result != 0 ) {
    warn "$Prog: Unable to start mongod: $? $!";
  }
}


#
# MySQL
#
sub mysql_connect {
  my ($mysql_host, $mysql_socket, $mysql_username, $mysql_password) = @_;
  my $dsn_extra = "";

  require DBI;
  DBI->import;

  if ( defined($mysql_defaults_file) )
  {
    ($mysql_host, $mysql_username, $mysql_password, $mysql_socket) = read_mydefaultsfile(
      $mysql_defaults_file,
    );
  } else {
    ($mysql_host, $mysql_username, $mysql_password, $mysql_socket) = read_mycnf(
      $mysql_host, $mysql_username, $mysql_password, $mysql_socket
    );
  }
  if( defined($mysql_socket) ) {
    $dsn_extra .= "mysql_socket=$mysql_socket;";
  }

  $mysql_host ||= 'localhost';

  $Debug and warn "$Prog: ", scalar localtime,
                  ": MySQL connect as $mysql_username\n";

  my $mysql_dbh = DBI->connect("DBI:mysql:;${dsn_extra}host=$mysql_host",
                         $mysql_username, $mysql_password)
    or die "$Prog: ERROR: Unable to connect to MySQL"
         . " on $mysql_host as $mysql_username";

  return $mysql_dbh;
}

sub mysql_lock {
  my ($mysql_dbh) = @_;

  # Don't pass FLUSH TABLES statements on to replication slaves
  # as this can interfere with long-running queries on the slaves.
  $mysql_dbh->do(q{ SET SQL_LOG_BIN=0 }) unless $Noaction;

  # Try a flush first without locking so the later flush with lock
  # goes faster.  This may not be needed as it seems to interfere with
  # some statements anyway.
  sql_timeout_retry(
    q{ FLUSH LOCAL TABLES },
    "MySQL flush",
    $lock_timeout,
    $lock_tries,
    $lock_sleep,
  );

  # Get a lock on the entire database
  sql_timeout_retry(
    q{ FLUSH LOCAL TABLES WITH READ LOCK },
    "MySQL flush & lock",
    $lock_timeout,
    $lock_tries,
    $lock_sleep,
  );

  my ($mysql_logfile, $mysql_position,
      $mysql_binlog_do_db, $mysql_binlog_ignore_db);
  if ( not $Noaction ) {
    # This might be a slave database already
    my $slave_status = $mysql_dbh->selectrow_hashref(q{ SHOW SLAVE STATUS });
    $mysql_logfile           = $slave_status->{Slave_IO_State}
                             ? $slave_status->{Master_Log_File}
                             : undef;
    $mysql_position          = $slave_status->{Read_Master_Log_Pos};
    $mysql_binlog_do_db      = $slave_status->{Replicate_Do_DB};
    $mysql_binlog_ignore_db  = $slave_status->{Replicate_Ignore_DB};

    # or this might be the master
    ($mysql_logfile, $mysql_position,
     $mysql_binlog_do_db, $mysql_binlog_ignore_db) =
      $mysql_dbh->selectrow_array(q{  SHOW MASTER STATUS  })
      unless $mysql_logfile;
  }

  $mysql_dbh->do(q{ SET SQL_LOG_BIN=1 }) unless $Noaction;

  print "$Prog: master_log_file=\"$mysql_logfile\",",
              " master_log_pos=$mysql_position\n"
    if $mysql_logfile and not $Quiet;

  if ( defined($mysql_master_status_file) && $mysql_logfile ) {
    $Debug and warn "$Prog: ", scalar localtime,
      ": writing MASTER STATUS to $mysql_master_status_file\n";
    if ( not $Noaction ) {
      open(MYSQLMASTERSTATUS,"> $mysql_master_status_file") or
        die "$Prog: Unable to open for write: $mysql_master_status_file: $!\n";
      print MYSQLMASTERSTATUS <<"EOM";
master_log_file="$mysql_logfile"
master_log_pos="$mysql_position"
master_binlog_do_db="$mysql_binlog_do_db"
master_binlog_ignore_db="$mysql_binlog_ignore_db"
EOM
      close(MYSQLMASTERSTATUS);
    }
  }

  return ($mysql_logfile, $mysql_position);
}

sub mysql_unlock {
  my ($mysql_dbh) = @_;

  $Debug and warn "$Prog: ", scalar localtime, ": MySQL unlock\n";
  $mysql_dbh->do(q{ UNLOCK TABLES }) unless $Noaction;

}

sub mysql_stop {
  $Debug and warn "$Prog: ", scalar localtime, ": MySQL stop\n";

  my $result = system('/usr/bin/mysqladmin', 'shutdown');

  if ( $result != 0 ) {
    die "$Prog: Unable to stop mysqld: $? $!";
  }

  return 1;
}

sub mysql_start {
  $Debug and warn "$Prog: ", scalar localtime, ": MySQL start\n";

  my $result = system('/etc/init.d/mysql', 'start');

  if ( $result != 0 ) {
    warn "$Prog: Unable to start mysqld: $? $!";
  }
}

# See also:
#http://search.cpan.org/dist/DBI/DBI.pm#Signal_Handling_and_Canceling_Operations
sub sql_timeout_retry {
  my ($sql, $description, $lock_timeout, $lock_tries, $lock_sleep) = @_;

  my $action = POSIX::SigAction->new(
    sub { $mysql_kill_query = 1; die "timeout"; },
    POSIX::SigSet->new( SIGALRM ),
  );
  my $oldaction = POSIX::SigAction->new();
  sigaction(SIGALRM, $action, $oldaction);
 LOCK:
  while ( $lock_tries -- ) {
    $Debug and warn "$Prog: ", scalar localtime, ": $description\n";
    eval {
      ualarm($lock_timeout * 1_000_000);
      $mysql_dbh->do($sql) unless $Noaction;
      ualarm(0);
    };
    ualarm(0);
    last LOCK unless $@ =~ /timeout/;

    if ( $mysql_kill_query ) {
       sql_kill_current_query();
    }

  } continue {
    die if $@ =~ /interrupted/;

    $Quiet or  warn "$Prog: MySQL timeout at $lock_timeout sec\n";
    $Debug and warn "$Prog: Trying again in $lock_sleep seconds\n";
    usleep($lock_sleep * 1_000_000);
    #TBD: May need to reopen $mysql_dbh here as the handle may not be clean.
  }
  sigaction(SIGALRM, $oldaction);
  die "$Prog: ERROR: MySQL failure: $@" if $@;
}

# Kill current query after timeout or interrupt signal (see issue #23)
sub sql_kill_current_query {
   if ( $mysql_dbh ) {
      $mysql_dbh->clone()->do("KILL QUERY ".$mysql_dbh->{"mysql_thread_id"});
   }
   $mysql_kill_query = 0;
}

sub fs_freeze {
  my ($freeze_cmd, $freeze_filesystem) = @_;

  for my $filesystem ( @$freeze_filesystem ) {
    run_command([$freeze_cmd, '-f', $filesystem]);
  }
}

sub fs_thaw {
  my ($freeze_filesystem) = @_;

  for my $filesystem ( @$freeze_filesystem ) {
    run_command([$freeze_cmd, '-u', $filesystem]);
  }
}

# mysql defaults-file
sub read_mydefaultsfile {
  my ($mysql_defaults_file) = @_;

  open(MYCNF, $mysql_defaults_file)
    or die "$Prog: ERROR: Couldn't open defaults-file $mysql_defaults_file\n";
  while ( defined (my $line = <MYCNF>) ) {
    $mysql_host     = $1 if $line =~ m%^\s*host\s*=\s*"?(\S+?)"?$%
                        and not defined $mysql_host;
    $mysql_username = $1 if $line =~ m%^\s*user\s*=\s*"?(\S+?)"?$%
                        and not defined $mysql_username;
    $mysql_password = $1 if $line =~ m%^\s*password\s*=\s*"?(\S+?)"?$%
                        and not defined $mysql_password;
    $mysql_socket   = $1 if $line =~ m%^\s*socket\s*=\s*"?(\S+?)"?$%
                        and not defined $mysql_socket;
  }
  close(MYCNF);

  return ($mysql_host, $mysql_username, $mysql_password, $mysql_socket);
}

# Look for the MySQL username/password in $HOME/.my.cnf
sub read_mycnf {
  my ($mysql_host, $mysql_username, $mysql_password, $mysql_socket) = @_;

  open(MYCNF, "$ENV{HOME}/.my.cnf")
    or return($mysql_host, $mysql_username, $mysql_password, $mysql_socket);
  while ( defined (my $line = <MYCNF>) ) {
    $mysql_host     = $1 if $line =~ m%^\s*host\s*=\s*"?(\S+?)"?$%
                        and not defined $mysql_host;
    $mysql_username = $1 if $line =~ m%^\s*user\s*=\s*"?(\S+?)"?$%
                        and not defined $mysql_username;
    $mysql_password = $1 if $line =~ m%^\s*password\s*=\s*"?(\S+?)"?$%
                        and not defined $mysql_password;
    $mysql_socket   = $1 if $line =~ m%^\s*socket\s*=\s*"?(\S+?)"?$%
                        and not defined $mysql_socket;
  }
  close(MYCNF);

  return ($mysql_host, $mysql_username, $mysql_password, $mysql_socket);
}


# Figure out which AWS credentials to use
sub determine_access_keys {
  my ($aws_access_key_id,      $aws_secret_access_key,
      $aws_access_key_id_file, $aws_secret_access_key_file,
      $aws_credentials_file,
     ) = @_;

  # 1. --aws-access-key-id and --aws-secret-access-key
  return ($aws_access_key_id, $aws_secret_access_key)
    if $aws_access_key_id;

  # 2. --aws-access-key-id-file and --aws-secret-access-key-file
  if ( $aws_access_key_id_file ) {
    die "$Prog: Please provide both --aws-access-key-id-file and --aws-secret-access-key-file"
      unless $aws_secret_access_key_file;
    $aws_access_key_id    = File::Slurp::read_file($aws_access_key_id_file);
    $aws_secret_access_key= File::Slurp::read_file($aws_secret_access_key_file);
    chomp($aws_access_key_id);
    chomp($aws_secret_access_key);
    return ($aws_access_key_id, $aws_secret_access_key);
  }

  # 3. $AWS_CREDENTIALS or $HOME/.awssecret
  return read_awssecret($aws_credentials_file);
}


# Look for the access keys in $AWS_CREDENTIALS or ~/.awssecret
sub read_awssecret {
  my ($aws_credentials_file) = @_;
      $aws_credentials_file  ||= "$ENV{HOME}/.awssecret";
  my ($aws_access_key_id, $aws_secret_access_key);
  eval {
    ($aws_access_key_id, $aws_secret_access_key) =
      File::Slurp::read_file($aws_credentials_file);
    chomp $aws_access_key_id;
    chomp $aws_secret_access_key;
  };
  return ($aws_access_key_id, $aws_secret_access_key);
}

# Run a system command, warning if there are problems.
# Pass in reference to an array of command args.
sub run_command {
  my ($command) = @_;

  $Debug and warn "$Prog: ", scalar localtime, ": @$command\n";
  return if $Noaction;
  eval {
    system(@$command) and die "failed($?)\n";
  };
  warn "$Prog: ERROR: @$command: $@" if $@;
}


# Support error formats from different versions of Net::Amazon::EC2
sub ec2_error_message {
    my ($error) = @_;

    if ( ref $error && ref $error->errors eq 'ARRAY' ) {
        $error = join("\n", map {$_->code.': '.$_->message} @{$error->errors});
    }

    return $error;
}
